import config.*
import jugador.*
import contadores.*
import obstaculos.*
import wollok.game.*

describe "Verifica modificacion de energía" {
	const barril
	const auto
	const bache
	const corazon
	const persona	
	const tiempo
	const aceite
	
	
	
	fixture{
		config.testeo(true)
		
		game.height(10)
		game.width(10)
		
		
		vida.iniciar()
		pasajeros.iniciar()
		
		vida.puntos(5)
		pasajeros.puntos(10)
		barril = new ObjetoEnergia(image="barril.png", energiaEfectuada = -2)
		auto = new ObjetoEnergia(image="auto_rojo.png", energiaEfectuada = -4)
		bache = new ObjetoEnergia(image="bache.png", energiaEfectuada = -1)
		corazon = new ObjetoEnergia(image="corazon.png", energiaEfectuada = 1)
		persona = new ObjetoAcumulador(image="pasajero.png")
		tiempo = new ObjetoTiempo(image="reloj5.png")
	    aceite = new ObjetoMovimiento(image="aceite.png")
	    
	}
	
	test "personaje impacta con barril y pierde 2 corazones" {
		assert.equals(12,personaje.energia())
		barril.impacto(personaje)
		assert.equals(10,personaje.energia())
	}
	
	test "personaje impacta con auto y pierde 4 corazones" {
		assert.equals(12,personaje.energia())
		auto.impacto(personaje)
		assert.equals(8,personaje.energia())	
		}
	
	test "personaje impacta con bache y pierde 1 corazon" {
		assert.equals(12,personaje.energia())
		bache.impacto(personaje)
		assert.equals(11,personaje.energia())	

	}

	test "personaje impacta con mancha de aceite y se correr una posicion a la izquierda" {
		personaje.position(game.at(5,1))
		assert.equals(5,personaje.position().x())
		personaje.mover(-1)
		assert.equals(4,personaje.position().x())		
		aceite.impacto(personaje)
		assert.equals(3,personaje.position().x())
	}
	
	test "personaje impacta con mancha de aceite y se correr una posicion a la derecha" {
		assert.equals(3,personaje.position().x())
		personaje.direccion()
		aceite.impacto(personaje)
		assert.equals(4,personaje.position().x())
	}
	
	test "personaje tiene 8 corazones e impacta con un corazon y queda con 9 corazones" {
		vida.cantidad(8)
		corazon.impacto(personaje)
		assert.equals(9,personaje.energia())	

	}
	
	test "personaje impacta con corazon,con 12 corazones. Queda con la misma cantidad" {
		assert.equals(12,personaje.energia())
		corazon.impacto(personaje)
		assert.equals(12,personaje.energia())	
	}
	
	
	test "personaje carga un personaje e incrementa la cantidad de pasajeros" {
		assert.equals(0,personaje.cantidadPasajeros())
		persona.impacto(personaje)
		assert.equals(1,personaje.cantidadPasajeros())
	}
	
	test "personaje tiene 5 pasajeros y carga 2 pasajero más"{
		pasajeros.cantidad(5)
		assert.equals(5,personaje.cantidadPasajeros())
		persona.impacto(personaje)
		persona.impacto(personaje)
		assert.equals(7,personaje.cantidadPasajeros())	
	}


	
	
	test "personaje impacta con reloj y el tiempo se incrementa en 5 segundos" {
		timer.cantidad(45)
		assert.equals(45,timer.cantidad())
		tiempo.impacto(personaje)
		assert.equals(50,timer.cantidad())
	}
	
	test "personaje no recolecta pasajeros y pierde todas las vidas/ 0 ptos" {
		
		vida.cantidad(3)
		pasajeros.cantidad(0)
		auto.impacto(personaje)
		assert.equals(0,personaje.energia())
		assert.equals(0,personaje.cantidadPasajeros())
		assert.equals(0,personaje.puntajeFinal())
		
	}
	
	test "personaje recolecta 4 pasajeros y pierde todas las vidas/ 40 ptos" {
		vida.cantidad(3)
		pasajeros.cantidad(4)
		auto.impacto(personaje)
		assert.equals(0,personaje.energia())
		assert.equals(4,personaje.cantidadPasajeros())
		assert.equals(40,personaje.puntajeFinal())
	}
	
	test "personaje no recolecta pasajeros y se le acaba el tiempo con maximo corazones / 60 ptos" {
		timer.cantidad(0)
		assert.equals(12,personaje.energia())
		assert.equals(0,personaje.cantidadPasajeros())
		assert.equals(60,personaje.puntajeFinal())
	}

	test "personaje no recolecta pasajeros y se le acaba el tiempo con 8 corazones / 40 ptos" {
		vida.cantidad(8)
		timer.cantidad(0)
		assert.equals(8,personaje.energia())
		assert.equals(0,personaje.cantidadPasajeros())
		assert.equals(40, personaje.puntajeFinal())
	}
	
	test "personaje recolecta 4 pasajeros y se le acaba el tiempo con 12 corazones / 100 ptos" {
		pasajeros.cantidad(4)
		timer.cantidad(0)
		assert.equals(12,personaje.energia())
		assert.equals(4,personaje.cantidadPasajeros())
		assert.equals(100, personaje.puntajeFinal())
	}
	
	test "personaje obtiene máximo puntaje/1000 ptos" {
		pasajeros.cantidad(100)
		timer.cantidad(0)
		assert.that(personaje.puntajeFinal()>1000)
	}
}
